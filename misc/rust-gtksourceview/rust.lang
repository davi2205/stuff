<?xml version="1.0" encoding="UTF-8"?>
<!--

  Alternative Rust Language Specification for GtkSourceView

  Copyright 2019 Davi Villalva. <davillal@gmail.com>
 
  If you have any suggestions, questions, or comments, please send me an email
  or drop a message on my GitHub. 
 
  ~~~~
 
  This file is based on the file published at

    https://github.com/rust-lang/gedit-config

  by The Rust Developers, which used the following license:

  Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
  http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
  <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your
  option. This file may not be copied, modified, or distributed
  except according to those terms.

  ~~~~

  GtkSourceView is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  GtkSourceView is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with this library; if not, see <http://www.gnu.org/licenses/>.

-->

<language id="rust" name="Rust" version="2.0" _section="Source">
  <metadata>
    <property name="mimetypes">text/rust</property>
    <property name="globs">*.rs</property>
    <property name="line-comment-start">//</property>
    <property name="block-comment-start">/*</property>
    <property name="block-comment-end">*/</property>
  </metadata>
  
  <styles>
    <!-- Keywords & Builtin Types -->
    <style id="keyword"         name="Keyword"                 map-to="def:keyword"/>
    <style id="reserved"        name="Reserved"                map-to="def:reserved"/>
    <style id="mut-ref"         name="Mut-Ref"                 map-to="def:builtin"/>
    <style id="self"            name="Self"                    map-to="def:keyword"/>
    <style id="builtin"         name="Builtin"                 map-to="def:builtin"/>
    <!-- Numbers -->
    <style id="number"          name="Number"                  map-to="def:number"/>
    <!-- Character & String -->
    <style id="char"            name="Character"               map-to="def:character"/>
    <style id="string"          name="String"                  map-to="def:string"/>
    <!-- Operators -->
    <style id="nsized-operator" name="Not Sized Operator"/>
    <style id="ref-operator"    name="Rerefence Operator"      map-to="def:builtin"/>
    <style id="ptr-operator"    name="Pointer Operator"        map-to="def:builtin"/>  
    <style id="const-ptr"       name="Const Keyword (Pointer)" map-to="rust:ptr-operator"/>
    <style id="scope-operator"  name="Scope Operator"          map-to="def:preprocessor"/>
    <style id="operator"        name="Operator"                map-to="def:operator"/>
    <style id="delimiter"       name="Delimiter"               map-to="rust:operator"/>  
    <!-- Misc -->
    <style id="lifetime"        name="Lifetime"                map-to="def:preprocessor"/>
    <style id="macro"           name="Macro"                   map-to="def:preprocessor"/>
    <style id="scope"           name="Scope"                   map-to="def:preprocessor"/>
    <style id="attribute"       name="Attribute"               map-to="def:preprocessor"/>
    <style id="comment"         name="Comment"                 map-to="def:comment"/>
    <style id="error"           name="Error"                   map-to="def:error"/>
  </styles>
  
  <definitions>
  
    <!-- Keywords & Builtin Types -->
  
    <!-- Keywords -->
    <context id="keywords" style-ref="keyword">
      <keyword>as</keyword>
      <keyword>box</keyword>
      <keyword>break</keyword>
      <keyword>const</keyword>
      <keyword>continue</keyword>
      <keyword>crate</keyword>
      <keyword>default</keyword>
      <keyword>else</keyword>
      <keyword>enum</keyword>
      <keyword>extern</keyword>
      <keyword>fn</keyword>
      <keyword>for</keyword>
      <keyword>if</keyword>
      <keyword>impl</keyword>
      <keyword>in</keyword>
      <keyword>let</keyword>
      <keyword>loop</keyword>
      <keyword>match</keyword>
      <keyword>mod</keyword>
      <keyword>move</keyword>
      <keyword>pub</keyword>
      <keyword>return</keyword>
      <keyword>static</keyword>
      <keyword>struct</keyword>
      <keyword>super</keyword>
      <keyword>trait</keyword>
      <keyword>type</keyword>
      <keyword>union</keyword>
      <keyword>unsafe</keyword>
      <keyword>use</keyword>
      <keyword>where</keyword>
      <keyword>while</keyword>
    </context>
    
    <!-- Reserved -->
    <context id="reserved" style-ref="reserved">
      <keyword>abstract</keyword>
      <keyword>alignof</keyword>
      <keyword>become</keyword>
      <keyword>do</keyword>
      <keyword>final</keyword>
      <keyword>macro</keyword>
      <keyword>offsetof</keyword>
      <keyword>override</keyword>
      <keyword>priv</keyword>
      <keyword>proc</keyword>
      <keyword>pure</keyword>
      <keyword>sizeof</keyword>
      <keyword>typeof</keyword>
      <keyword>unsized</keyword>
      <keyword>virtual</keyword>
      <keyword>yield</keyword>
    </context>
    
    <!-- Mut-Ref -->
    <context id="mut-ref" style-ref="mut-ref">
      <keyword>mut</keyword>
      <keyword>ref</keyword>
    </context>
    
    <!-- Self -->
    <context id="self" style-ref="self">
      <keyword>self</keyword>
      <keyword>Self</keyword>
    </context>
    
    <!-- Builtin -->
    <context id="builtin" style-ref="builtin">
      <keyword>bool</keyword>
      <keyword>isize</keyword>
      <keyword>usize</keyword>
      <keyword>i8</keyword>
      <keyword>i16</keyword>
      <keyword>i32</keyword>
      <keyword>i64</keyword>
      <keyword>i128</keyword>
      <keyword>u8</keyword>
      <keyword>u16</keyword>
      <keyword>u32</keyword>
      <keyword>u64</keyword>
      <keyword>u128</keyword>
      <keyword>f32</keyword>
      <keyword>f64</keyword>
      <keyword>char</keyword>
      <keyword>str</keyword>
    </context>
    
    <!-- Numbers -->
    
    <define-regex id="bin-digit">[01]</define-regex>
    <define-regex id="oct-digit">[0-7]</define-regex>
    <define-regex id="dec-digit">[0-9]</define-regex>
    <define-regex id="hex-digit">[0-9a-fA-F]</define-regex>
    
    <define-regex id="dec-literal">\%{dec-digit}(\%{dec-digit}|_)*</define-regex>
    
    <define-regex id="int-suffix" extended="true">
      i8|i16|i32|i64|i128|isize|u8|u16|u32|u64|u128|usize
    </define-regex>
    
    <define-regex id="float-suffix">f32|f64</define-regex>
    <define-regex id="exponent">[eE][+-]?(\%{dec-digit}|_)*\%{dec-literal}</define-regex>

    <!-- Float Number -->
    <context id="float" style-ref="number">
      <match extended="true">
        (?&lt;![\w_])
        (
        \%{dec-literal}(\.\%{dec-literal})?\%{exponent}?\%{float-suffix}|
        \%{dec-literal}\.\%{dec-literal}\%{exponent}?|
        \%{dec-literal}\%{exponent}|
        \%{dec-literal}\.(?![\.a-zA-Z_])
        )
        (?!\w)
      </match>
    </context>    

    <!-- Invalid Float Number -->
    <context id="invalid-float" style-ref="error">
      <match extended="true">
      (?&lt;![\w_])
      (
      \%{dec-digit}\w+\%{float-suffix}|
      \%{dec-digit}\w*\.\%{dec-digit}\w*
      )
      </match>
    </context>
    
    <!-- Integer Number -->
    <context id="integer" style-ref="number">
      <match extended="true">
      (?&lt;![\w_])
      (
      0b(\%{bin-digit}|_)*\%{bin-digit}(\%{bin-digit}|_)*\%{int-suffix}?|
      0o(\%{oct-digit}|_)*\%{oct-digit}(\%{oct-digit}|_)*\%{int-suffix}?|
      0x(\%{hex-digit}|_)*\%{hex-digit}(\%{hex-digit}|_)*\%{int-suffix}?|
      \%{dec-literal}\%{int-suffix}?
      )
      (?!\w)
      </match>
    </context>

    <!-- Invalid Integer Number -->
    <context id="invalid-integer" style-ref="error">
      <match extended="true">
        (?&lt;![\w_])\%{dec-digit}\w*\%{int-suffix}?
      </match>
    </context>
    
    <!-- Character & String -->
    
    <define-regex id="ascii-escape">\\['"\\nrt0]|\\x\%{oct-digit}\%{hex-digit}</define-regex>
    <define-regex id="unicode-escape">\\u\{(\%{hex-digit}_*){1,6}\}</define-regex>
    
    <!-- Byte Character -->
    <context id="byte-char" style-ref="char">
      <match>b'(\%{ascii-escape}|[\x00-\x08\x0b\x0c\x0e-\x26\x28-\x5b\x5d-\x7f])'</match>
    </context>
    
    <!-- Invalid Byte Character -->
    <context id="invalid-byte-char" style-ref="error">
      <match>b'[^']*'</match>
    </context>
    
    <!-- Raw Byte String -->
    <context id="raw-byte-string" style-ref="string" class="string" class-disabled="no-spell-check">
      <start>br(#*)"</start>
      <end>"\%{1@start}</end>
      <include>
        <context ref="def:line-continue"/>
        <context id="invalid-raw-byte-string-char" style-ref="error">
          <match>[^\x00-\x7f]+</match>
        </context>
      </include>
    </context>
    
    <!-- Byte String -->
    <context id="byte-string" style-ref="string" class="string" class-disabled="no-spell-check">
      <start>b"</start>
      <end>"</end>
      <include>
        <context ref="def:line-continue"/>
        <context id="byte-char-escape" style-ref="char">
          <match>\%{ascii-escape}</match>
        </context>
        <context id="invalid-byte-char-escape" style-ref="error">
          <match>\\[^"\s]*</match>
        </context>
        <context id="invalid-byte-string-char" style-ref="error">
          <match>[^\x00-\x7f]+</match>
        </context>
      </include>
    </context>
    
    <!-- Character -->
    <context id="char" style-ref="char">
      <match>'(\%{ascii-escape}|\%{unicode-escape}|[^'\\\n\r\t])'</match>
    </context>
    
    <!-- Invalid Character -->
    <context id="invalid-char" style-ref="error">
      <match>'[^']*'</match>
    </context>
    
    <!-- Raw String -->
    <context id="raw-string" style-ref="string" class="string" class-disabled="no-spell-check">
      <start>r(#*)"</start>
      <end>"\%{1@start}</end>
      <include>
        <context ref="def:line-continue"/>
      </include>
    </context>
    
    <!-- String -->
    <context id="string" style-ref="string" class="string" class-disabled="no-spell-check">
      <start>"</start>
      <end>"</end>
      <include>
        <context ref="def:line-continue"/>
        <context id="char-escape" style-ref="char">
          <match>\%{ascii-escape}|\%{unicode-escape}</match>
        </context>
        <context id="invalid-char-escape" style-ref="error">
          <match>\\[^"\s]*</match>
        </context>
      </include>
    </context>
    
    <!-- Operators -->
    
    <context id="nsized-operator" style-ref="nsized-operator">
      <match>\?(?=Sized)</match>
    </context>
    
    <context id="logic-and" style-ref="operator">
      <match>&amp;&amp;(?=\s|$)</match>
    </context>
    
    <context id="ref-operator" style-ref="ref-operator">
      <match>&amp;(?=\S)</match>
    </context>
    
    <context id="ptr-operator" style-ref="ptr-operator">
      <match>\*(?=\S)</match>
    </context>
    
    <context id="const-ptr" style-ref="const-ptr">
      <match>(?&lt;=\*)const</match>
    </context>
    
    <context id="operator" style-ref="operator">
      <match>[+\-*\/%^!&amp;|&gt;&lt;=@\.,;:#$?]</match>
    </context>
    
    <context id="delimiter" style-ref="delimiter">
      <match>[\{\}\(\)\[\]]</match>
    </context>
    
    <!-- Misc -->
    
    <define-regex id="ident">[a-zA-Z_][a-zA-Z0-9_]*</define-regex>
    
    <!-- Lifetime -->
    <context id="lifetime" style-ref="lifetime">
      <match>'\%{ident}(?=[^a-zA-Z0-9_']|$)</match>
    </context>
    
    <!-- Macro -->
    <context id="macro" style-ref="macro">
      <match>\%{ident}!</match>
    </context>
    
    <!-- Scope -->
    <context id="scope" style-ref="scope">
      <match>\%{ident}(::)</match>
      <include>
        <context id="scope-operator" sub-pattern="1" style-ref="scope-operator"/>
      </include>
    </context>
    
    <!-- Attribute -->
    <context id="attribute" style-ref="attribute" class="attribute">
      <start extended="true">\#!?\[</start>
      <end>\]</end>
      <include>
        <context ref="def:in-comment"/>
        <context ref="string"/>
        <context ref="raw-string"/>
      </include>
    </context>

    <!-- Comment Multiline Nested -->
    <context id="comment-multiline-nested" style-ref="comment" class-disabled="no-spell-check" class="comment" >
      <start>/\*</start>
      <end>\*/</end>
      <include>
        <context ref="comment-multiline-nested"/>
      </include>
    </context>
    
    <!-- Main Context -->
    <context id="rust" class="no-spell-check">
      <include>
        <context ref="def:c-like-comment" style-ref="comment"/>
        <context ref="comment-multiline-nested"/>
        <context ref="const-ptr"/>
        <context ref="keywords"/>
        <context ref="reserved"/>
        <context ref="mut-ref"/>
        <context ref="self"/>
        <context ref="builtin"/>
        <context ref="float"/>
        <context ref="invalid-float"/>
        <context ref="integer"/>
        <context ref="invalid-integer"/>
        <context ref="lifetime"/>
        <context ref="byte-char"/>
        <context ref="invalid-byte-char"/>
        <context ref="raw-byte-string"/>
        <context ref="byte-string"/>
        <context ref="char"/>
        <context ref="invalid-char"/>
        <context ref="raw-string"/>
        <context ref="string"/>
        <context ref="macro"/>
        <context ref="scope"/>
        <context ref="attribute"/>
        <context ref="nsized-operator"/>
        <context ref="logic-and"/>
        <context ref="ref-operator"/>
        <context ref="ptr-operator"/>
        <context ref="operator"/>
        <context ref="delimiter"/>
      </include>
    </context>
    
  </definitions>
</language>
